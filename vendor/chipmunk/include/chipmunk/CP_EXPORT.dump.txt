	#define CP_EXPORT __declspec(dllexport)
	#define CP_EXPORT
CP_EXPORT void cpMessage(const char *condition, const char *file, int line, int isError, int isHardError, const char *message, ...);
CP_EXPORT extern const char *cpVersionString;
CP_EXPORT cpFloat cpMomentForCircle(cpFloat m, cpFloat r1, cpFloat r2, cpVect offset);
CP_EXPORT cpFloat cpAreaForCircle(cpFloat r1, cpFloat r2);
CP_EXPORT cpFloat cpMomentForSegment(cpFloat m, cpVect a, cpVect b, cpFloat radius);
CP_EXPORT cpFloat cpAreaForSegment(cpVect a, cpVect b, cpFloat radius);
CP_EXPORT cpFloat cpMomentForPoly(cpFloat m, int count, const cpVect *verts, cpVect offset, cpFloat radius);
CP_EXPORT cpFloat cpAreaForPoly(const int count, const cpVect *verts, cpFloat radius);
CP_EXPORT cpVect cpCentroidForPoly(const int count, const cpVect *verts);
CP_EXPORT cpFloat cpMomentForBox(cpFloat m, cpFloat width, cpFloat height);
CP_EXPORT cpFloat cpMomentForBox2(cpFloat m, cpBB box);
CP_EXPORT int cpConvexHull(int count, const cpVect *verts, cpVect *result, int *first, cpFloat tol);
  #define MAKE_REF(name) CP_EXPORT decltype(name) *_##name = name
CP_EXPORT void cpCircleShapeSetRadius(cpShape *shape, cpFloat radius);
CP_EXPORT void cpCircleShapeSetOffset(cpShape *shape, cpVect offset);
CP_EXPORT void cpSegmentShapeSetEndpoints(cpShape *shape, cpVect a, cpVect b);
CP_EXPORT void cpSegmentShapeSetRadius(cpShape *shape, cpFloat radius);
CP_EXPORT void cpPolyShapeSetVerts(cpShape *shape, int count, cpVect *verts, cpTransform transform);
CP_EXPORT void cpPolyShapeSetVertsRaw(cpShape *shape, int count, cpVect *verts);
CP_EXPORT void cpPolyShapeSetRadius(cpShape *shape, cpFloat radius);
CP_EXPORT cpFloat cpArbiterGetRestitution(const cpArbiter *arb);
CP_EXPORT void cpArbiterSetRestitution(cpArbiter *arb, cpFloat restitution);
CP_EXPORT cpFloat cpArbiterGetFriction(const cpArbiter *arb);
CP_EXPORT void cpArbiterSetFriction(cpArbiter *arb, cpFloat friction);
CP_EXPORT cpVect cpArbiterGetSurfaceVelocity(cpArbiter *arb);
CP_EXPORT void cpArbiterSetSurfaceVelocity(cpArbiter *arb, cpVect vr);
CP_EXPORT cpDataPointer cpArbiterGetUserData(const cpArbiter *arb);
CP_EXPORT void cpArbiterSetUserData(cpArbiter *arb, cpDataPointer userData);
CP_EXPORT cpVect cpArbiterTotalImpulse(const cpArbiter *arb);
CP_EXPORT cpFloat cpArbiterTotalKE(const cpArbiter *arb);
CP_EXPORT cpBool cpArbiterIgnore(cpArbiter *arb);
CP_EXPORT void cpArbiterGetShapes(const cpArbiter *arb, cpShape **a, cpShape **b);
CP_EXPORT void cpArbiterGetBodies(const cpArbiter *arb, cpBody **a, cpBody **b);
CP_EXPORT cpContactPointSet cpArbiterGetContactPointSet(const cpArbiter *arb);
CP_EXPORT void cpArbiterSetContactPointSet(cpArbiter *arb, cpContactPointSet *set);
CP_EXPORT cpBool cpArbiterIsFirstContact(const cpArbiter *arb);
CP_EXPORT cpBool cpArbiterIsRemoval(const cpArbiter *arb);
CP_EXPORT int cpArbiterGetCount(const cpArbiter *arb);
CP_EXPORT cpVect cpArbiterGetNormal(const cpArbiter *arb);
CP_EXPORT cpVect cpArbiterGetPointA(const cpArbiter *arb, int i);
CP_EXPORT cpVect cpArbiterGetPointB(const cpArbiter *arb, int i);
CP_EXPORT cpFloat cpArbiterGetDepth(const cpArbiter *arb, int i);
CP_EXPORT cpBool cpArbiterCallWildcardBeginA(cpArbiter *arb, cpSpace *space);
CP_EXPORT cpBool cpArbiterCallWildcardBeginB(cpArbiter *arb, cpSpace *space);
CP_EXPORT cpBool cpArbiterCallWildcardPreSolveA(cpArbiter *arb, cpSpace *space);
CP_EXPORT cpBool cpArbiterCallWildcardPreSolveB(cpArbiter *arb, cpSpace *space);
CP_EXPORT void cpArbiterCallWildcardPostSolveA(cpArbiter *arb, cpSpace *space);
CP_EXPORT void cpArbiterCallWildcardPostSolveB(cpArbiter *arb, cpSpace *space);
CP_EXPORT void cpArbiterCallWildcardSeparateA(cpArbiter *arb, cpSpace *space);
CP_EXPORT void cpArbiterCallWildcardSeparateB(cpArbiter *arb, cpSpace *space);
CP_EXPORT cpBody* cpBodyAlloc(void);
CP_EXPORT cpBody* cpBodyInit(cpBody *body, cpFloat mass, cpFloat moment);
CP_EXPORT cpBody* cpBodyNew(cpFloat mass, cpFloat moment);
CP_EXPORT cpBody* cpBodyNewKinematic(void);
CP_EXPORT cpBody* cpBodyNewStatic(void);
CP_EXPORT void cpBodyDestroy(cpBody *body);
CP_EXPORT void cpBodyFree(cpBody *body);
CP_EXPORT void cpBodyActivate(cpBody *body);
CP_EXPORT void cpBodyActivateStatic(cpBody *body, cpShape *filter);
CP_EXPORT void cpBodySleep(cpBody *body);
CP_EXPORT void cpBodySleepWithGroup(cpBody *body, cpBody *group);
CP_EXPORT cpBool cpBodyIsSleeping(const cpBody *body);
CP_EXPORT cpBodyType cpBodyGetType(cpBody *body);
CP_EXPORT void cpBodySetType(cpBody *body, cpBodyType type);
CP_EXPORT cpSpace* cpBodyGetSpace(const cpBody *body);
CP_EXPORT cpFloat cpBodyGetMass(const cpBody *body);
CP_EXPORT void cpBodySetMass(cpBody *body, cpFloat m);
CP_EXPORT cpFloat cpBodyGetMoment(const cpBody *body);
CP_EXPORT void cpBodySetMoment(cpBody *body, cpFloat i);
CP_EXPORT cpVect cpBodyGetPosition(const cpBody *body);
CP_EXPORT void cpBodySetPosition(cpBody *body, cpVect pos);
CP_EXPORT cpVect cpBodyGetCenterOfGravity(const cpBody *body);
CP_EXPORT void cpBodySetCenterOfGravity(cpBody *body, cpVect cog);
CP_EXPORT cpVect cpBodyGetVelocity(const cpBody *body);
CP_EXPORT void cpBodySetVelocity(cpBody *body, cpVect velocity);
CP_EXPORT cpVect cpBodyGetForce(const cpBody *body);
CP_EXPORT void cpBodySetForce(cpBody *body, cpVect force);
CP_EXPORT cpFloat cpBodyGetAngle(const cpBody *body);
CP_EXPORT void cpBodySetAngle(cpBody *body, cpFloat a);
CP_EXPORT cpFloat cpBodyGetAngularVelocity(const cpBody *body);
CP_EXPORT void cpBodySetAngularVelocity(cpBody *body, cpFloat angularVelocity);
CP_EXPORT cpFloat cpBodyGetTorque(const cpBody *body);
CP_EXPORT void cpBodySetTorque(cpBody *body, cpFloat torque);
CP_EXPORT cpVect cpBodyGetRotation(const cpBody *body);
CP_EXPORT cpDataPointer cpBodyGetUserData(const cpBody *body);
CP_EXPORT void cpBodySetUserData(cpBody *body, cpDataPointer userData);
CP_EXPORT void cpBodySetVelocityUpdateFunc(cpBody *body, cpBodyVelocityFunc velocityFunc);
CP_EXPORT void cpBodySetPositionUpdateFunc(cpBody *body, cpBodyPositionFunc positionFunc);
CP_EXPORT void cpBodyUpdateVelocity(cpBody *body, cpVect gravity, cpFloat damping, cpFloat dt);
CP_EXPORT void cpBodyUpdatePosition(cpBody *body, cpFloat dt);
CP_EXPORT cpVect cpBodyLocalToWorld(const cpBody *body, const cpVect point);
CP_EXPORT cpVect cpBodyWorldToLocal(const cpBody *body, const cpVect point);
CP_EXPORT void cpBodyApplyForceAtWorldPoint(cpBody *body, cpVect force, cpVect point);
CP_EXPORT void cpBodyApplyForceAtLocalPoint(cpBody *body, cpVect force, cpVect point);
CP_EXPORT void cpBodyApplyImpulseAtWorldPoint(cpBody *body, cpVect impulse, cpVect point);
CP_EXPORT void cpBodyApplyImpulseAtLocalPoint(cpBody *body, cpVect impulse, cpVect point);
CP_EXPORT cpVect cpBodyGetVelocityAtWorldPoint(const cpBody *body, cpVect point);
CP_EXPORT cpVect cpBodyGetVelocityAtLocalPoint(const cpBody *body, cpVect point);
CP_EXPORT cpFloat cpBodyKineticEnergy(const cpBody *body);
CP_EXPORT void cpBodyEachShape(cpBody *body, cpBodyShapeIteratorFunc func, void *data);
CP_EXPORT void cpBodyEachConstraint(cpBody *body, cpBodyConstraintIteratorFunc func, void *data);
CP_EXPORT void cpBodyEachArbiter(cpBody *body, cpBodyArbiterIteratorFunc func, void *data);
CP_EXPORT void cpConstraintDestroy(cpConstraint *constraint);
CP_EXPORT void cpConstraintFree(cpConstraint *constraint);
CP_EXPORT cpSpace* cpConstraintGetSpace(const cpConstraint *constraint);
CP_EXPORT cpBody* cpConstraintGetBodyA(const cpConstraint *constraint);
CP_EXPORT cpBody* cpConstraintGetBodyB(const cpConstraint *constraint);
CP_EXPORT cpFloat cpConstraintGetMaxForce(const cpConstraint *constraint);
CP_EXPORT void cpConstraintSetMaxForce(cpConstraint *constraint, cpFloat maxForce);
CP_EXPORT cpFloat cpConstraintGetErrorBias(const cpConstraint *constraint);
CP_EXPORT void cpConstraintSetErrorBias(cpConstraint *constraint, cpFloat errorBias);
CP_EXPORT cpFloat cpConstraintGetMaxBias(const cpConstraint *constraint);
CP_EXPORT void cpConstraintSetMaxBias(cpConstraint *constraint, cpFloat maxBias);
CP_EXPORT cpBool cpConstraintGetCollideBodies(const cpConstraint *constraint);
CP_EXPORT void cpConstraintSetCollideBodies(cpConstraint *constraint, cpBool collideBodies);
CP_EXPORT cpConstraintPreSolveFunc cpConstraintGetPreSolveFunc(const cpConstraint *constraint);
CP_EXPORT void cpConstraintSetPreSolveFunc(cpConstraint *constraint, cpConstraintPreSolveFunc preSolveFunc);
CP_EXPORT cpConstraintPostSolveFunc cpConstraintGetPostSolveFunc(const cpConstraint *constraint);
CP_EXPORT void cpConstraintSetPostSolveFunc(cpConstraint *constraint, cpConstraintPostSolveFunc postSolveFunc);
CP_EXPORT cpDataPointer cpConstraintGetUserData(const cpConstraint *constraint);
CP_EXPORT void cpConstraintSetUserData(cpConstraint *constraint, cpDataPointer userData);
CP_EXPORT cpFloat cpConstraintGetImpulse(cpConstraint *constraint);
CP_EXPORT cpBool cpConstraintIsDampedRotarySpring(const cpConstraint *constraint);
CP_EXPORT cpDampedRotarySpring* cpDampedRotarySpringAlloc(void);
CP_EXPORT cpDampedRotarySpring* cpDampedRotarySpringInit(cpDampedRotarySpring *joint, cpBody *a, cpBody *b, cpFloat restAngle, cpFloat stiffness, cpFloat damping);
CP_EXPORT cpConstraint* cpDampedRotarySpringNew(cpBody *a, cpBody *b, cpFloat restAngle, cpFloat stiffness, cpFloat damping);
CP_EXPORT cpFloat cpDampedRotarySpringGetRestAngle(const cpConstraint *constraint);
CP_EXPORT void cpDampedRotarySpringSetRestAngle(cpConstraint *constraint, cpFloat restAngle);
CP_EXPORT cpFloat cpDampedRotarySpringGetStiffness(const cpConstraint *constraint);
CP_EXPORT void cpDampedRotarySpringSetStiffness(cpConstraint *constraint, cpFloat stiffness);
CP_EXPORT cpFloat cpDampedRotarySpringGetDamping(const cpConstraint *constraint);
CP_EXPORT void cpDampedRotarySpringSetDamping(cpConstraint *constraint, cpFloat damping);
CP_EXPORT cpDampedRotarySpringTorqueFunc cpDampedRotarySpringGetSpringTorqueFunc(const cpConstraint *constraint);
CP_EXPORT void cpDampedRotarySpringSetSpringTorqueFunc(cpConstraint *constraint, cpDampedRotarySpringTorqueFunc springTorqueFunc);
CP_EXPORT cpBool cpConstraintIsDampedSpring(const cpConstraint *constraint);
CP_EXPORT cpDampedSpring* cpDampedSpringAlloc(void);
CP_EXPORT cpDampedSpring* cpDampedSpringInit(cpDampedSpring *joint, cpBody *a, cpBody *b, cpVect anchorA, cpVect anchorB, cpFloat restLength, cpFloat stiffness, cpFloat damping);
CP_EXPORT cpConstraint* cpDampedSpringNew(cpBody *a, cpBody *b, cpVect anchorA, cpVect anchorB, cpFloat restLength, cpFloat stiffness, cpFloat damping);
CP_EXPORT cpVect cpDampedSpringGetAnchorA(const cpConstraint *constraint);
CP_EXPORT void cpDampedSpringSetAnchorA(cpConstraint *constraint, cpVect anchorA);
CP_EXPORT cpVect cpDampedSpringGetAnchorB(const cpConstraint *constraint);
CP_EXPORT void cpDampedSpringSetAnchorB(cpConstraint *constraint, cpVect anchorB);
CP_EXPORT cpFloat cpDampedSpringGetRestLength(const cpConstraint *constraint);
CP_EXPORT void cpDampedSpringSetRestLength(cpConstraint *constraint, cpFloat restLength);
CP_EXPORT cpFloat cpDampedSpringGetStiffness(const cpConstraint *constraint);
CP_EXPORT void cpDampedSpringSetStiffness(cpConstraint *constraint, cpFloat stiffness);
CP_EXPORT cpFloat cpDampedSpringGetDamping(const cpConstraint *constraint);
CP_EXPORT void cpDampedSpringSetDamping(cpConstraint *constraint, cpFloat damping);
CP_EXPORT cpDampedSpringForceFunc cpDampedSpringGetSpringForceFunc(const cpConstraint *constraint);
CP_EXPORT void cpDampedSpringSetSpringForceFunc(cpConstraint *constraint, cpDampedSpringForceFunc springForceFunc);
CP_EXPORT cpBool cpConstraintIsGearJoint(const cpConstraint *constraint);
CP_EXPORT cpGearJoint* cpGearJointAlloc(void);
CP_EXPORT cpGearJoint* cpGearJointInit(cpGearJoint *joint, cpBody *a, cpBody *b, cpFloat phase, cpFloat ratio);
CP_EXPORT cpConstraint* cpGearJointNew(cpBody *a, cpBody *b, cpFloat phase, cpFloat ratio);
CP_EXPORT cpFloat cpGearJointGetPhase(const cpConstraint *constraint);
CP_EXPORT void cpGearJointSetPhase(cpConstraint *constraint, cpFloat phase);
CP_EXPORT cpFloat cpGearJointGetRatio(const cpConstraint *constraint);
CP_EXPORT void cpGearJointSetRatio(cpConstraint *constraint, cpFloat ratio);
CP_EXPORT cpBool cpConstraintIsGrooveJoint(const cpConstraint *constraint);
CP_EXPORT cpGrooveJoint* cpGrooveJointAlloc(void);
CP_EXPORT cpGrooveJoint* cpGrooveJointInit(cpGrooveJoint *joint, cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchorB);
CP_EXPORT cpConstraint* cpGrooveJointNew(cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchorB);
CP_EXPORT cpVect cpGrooveJointGetGrooveA(const cpConstraint *constraint);
CP_EXPORT void cpGrooveJointSetGrooveA(cpConstraint *constraint, cpVect grooveA);
CP_EXPORT cpVect cpGrooveJointGetGrooveB(const cpConstraint *constraint);
CP_EXPORT void cpGrooveJointSetGrooveB(cpConstraint *constraint, cpVect grooveB);
CP_EXPORT cpVect cpGrooveJointGetAnchorB(const cpConstraint *constraint);
CP_EXPORT void cpGrooveJointSetAnchorB(cpConstraint *constraint, cpVect anchorB);
CP_EXPORT cpSpace *cpHastySpaceNew(void);
CP_EXPORT void cpHastySpaceFree(cpSpace *space);
CP_EXPORT void cpHastySpaceSetThreads(cpSpace *space, unsigned long threads);
CP_EXPORT unsigned long cpHastySpaceGetThreads(cpSpace *space);
CP_EXPORT void cpHastySpaceStep(cpSpace *space, cpFloat dt);
CP_EXPORT void cpMarchSoft(
CP_EXPORT void cpMarchHard(
CP_EXPORT cpBool cpConstraintIsPinJoint(const cpConstraint *constraint);
CP_EXPORT cpPinJoint* cpPinJointAlloc(void);
CP_EXPORT cpPinJoint* cpPinJointInit(cpPinJoint *joint, cpBody *a, cpBody *b, cpVect anchorA, cpVect anchorB);
CP_EXPORT cpConstraint* cpPinJointNew(cpBody *a, cpBody *b, cpVect anchorA, cpVect anchorB);
CP_EXPORT cpVect cpPinJointGetAnchorA(const cpConstraint *constraint);
CP_EXPORT void cpPinJointSetAnchorA(cpConstraint *constraint, cpVect anchorA);
CP_EXPORT cpVect cpPinJointGetAnchorB(const cpConstraint *constraint);
CP_EXPORT void cpPinJointSetAnchorB(cpConstraint *constraint, cpVect anchorB);
CP_EXPORT cpFloat cpPinJointGetDist(const cpConstraint *constraint);
CP_EXPORT void cpPinJointSetDist(cpConstraint *constraint, cpFloat dist);
CP_EXPORT cpBool cpConstraintIsPivotJoint(const cpConstraint *constraint);
CP_EXPORT cpPivotJoint* cpPivotJointAlloc(void);
CP_EXPORT cpPivotJoint* cpPivotJointInit(cpPivotJoint *joint, cpBody *a, cpBody *b, cpVect anchorA, cpVect anchorB);
CP_EXPORT cpConstraint* cpPivotJointNew(cpBody *a, cpBody *b, cpVect pivot);
CP_EXPORT cpConstraint* cpPivotJointNew2(cpBody *a, cpBody *b, cpVect anchorA, cpVect anchorB);
CP_EXPORT cpVect cpPivotJointGetAnchorA(const cpConstraint *constraint);
CP_EXPORT void cpPivotJointSetAnchorA(cpConstraint *constraint, cpVect anchorA);
CP_EXPORT cpVect cpPivotJointGetAnchorB(const cpConstraint *constraint);
CP_EXPORT void cpPivotJointSetAnchorB(cpConstraint *constraint, cpVect anchorB);
CP_EXPORT cpPolyShape* cpPolyShapeAlloc(void);
CP_EXPORT cpPolyShape* cpPolyShapeInit(cpPolyShape *poly, cpBody *body, int count, const cpVect *verts, cpTransform transform, cpFloat radius);
CP_EXPORT cpPolyShape* cpPolyShapeInitRaw(cpPolyShape *poly, cpBody *body, int count, const cpVect *verts, cpFloat radius);
CP_EXPORT cpShape* cpPolyShapeNew(cpBody *body, int count, const cpVect *verts, cpTransform transform, cpFloat radius);
CP_EXPORT cpShape* cpPolyShapeNewRaw(cpBody *body, int count, const cpVect *verts, cpFloat radius);
CP_EXPORT cpPolyShape* cpBoxShapeInit(cpPolyShape *poly, cpBody *body, cpFloat width, cpFloat height, cpFloat radius);
CP_EXPORT cpPolyShape* cpBoxShapeInit2(cpPolyShape *poly, cpBody *body, cpBB box, cpFloat radius);
CP_EXPORT cpShape* cpBoxShapeNew(cpBody *body, cpFloat width, cpFloat height, cpFloat radius);
CP_EXPORT cpShape* cpBoxShapeNew2(cpBody *body, cpBB box, cpFloat radius);
CP_EXPORT int cpPolyShapeGetCount(const cpShape *shape);
CP_EXPORT cpVect cpPolyShapeGetVert(const cpShape *shape, int index);
CP_EXPORT cpFloat cpPolyShapeGetRadius(const cpShape *shape);
CP_EXPORT void cpPolylineFree(cpPolyline *line);
CP_EXPORT cpBool cpPolylineIsClosed(cpPolyline *line);
CP_EXPORT cpPolyline *cpPolylineSimplifyCurves(cpPolyline *line, cpFloat tol);
CP_EXPORT cpPolyline *cpPolylineSimplifyVertexes(cpPolyline *line, cpFloat tol);
CP_EXPORT cpPolyline *cpPolylineToConvexHull(cpPolyline *line, cpFloat tol);
CP_EXPORT cpPolylineSet *cpPolylineSetAlloc(void);
CP_EXPORT cpPolylineSet *cpPolylineSetInit(cpPolylineSet *set);
CP_EXPORT cpPolylineSet *cpPolylineSetNew(void);
CP_EXPORT void cpPolylineSetDestroy(cpPolylineSet *set, cpBool freePolylines);
CP_EXPORT void cpPolylineSetFree(cpPolylineSet *set, cpBool freePolylines);
CP_EXPORT void cpPolylineSetCollectSegment(cpVect v0, cpVect v1, cpPolylineSet *lines);
CP_EXPORT cpPolylineSet *cpPolylineConvexDecomposition(cpPolyline *line, cpFloat tol);
CP_EXPORT cpBool cpConstraintIsRatchetJoint(const cpConstraint *constraint);
CP_EXPORT cpRatchetJoint* cpRatchetJointAlloc(void);
CP_EXPORT cpRatchetJoint* cpRatchetJointInit(cpRatchetJoint *joint, cpBody *a, cpBody *b, cpFloat phase, cpFloat ratchet);
CP_EXPORT cpConstraint* cpRatchetJointNew(cpBody *a, cpBody *b, cpFloat phase, cpFloat ratchet);
CP_EXPORT cpFloat cpRatchetJointGetAngle(const cpConstraint *constraint);
CP_EXPORT void cpRatchetJointSetAngle(cpConstraint *constraint, cpFloat angle);
CP_EXPORT cpFloat cpRatchetJointGetPhase(const cpConstraint *constraint);
CP_EXPORT void cpRatchetJointSetPhase(cpConstraint *constraint, cpFloat phase);
CP_EXPORT cpFloat cpRatchetJointGetRatchet(const cpConstraint *constraint);
CP_EXPORT void cpRatchetJointSetRatchet(cpConstraint *constraint, cpFloat ratchet);
CP_EXPORT cpBool cpConstraintIsRotaryLimitJoint(const cpConstraint *constraint);
CP_EXPORT cpRotaryLimitJoint* cpRotaryLimitJointAlloc(void);
CP_EXPORT cpRotaryLimitJoint* cpRotaryLimitJointInit(cpRotaryLimitJoint *joint, cpBody *a, cpBody *b, cpFloat min, cpFloat max);
CP_EXPORT cpConstraint* cpRotaryLimitJointNew(cpBody *a, cpBody *b, cpFloat min, cpFloat max);
CP_EXPORT cpFloat cpRotaryLimitJointGetMin(const cpConstraint *constraint);
CP_EXPORT void cpRotaryLimitJointSetMin(cpConstraint *constraint, cpFloat min);
CP_EXPORT cpFloat cpRotaryLimitJointGetMax(const cpConstraint *constraint);
CP_EXPORT void cpRotaryLimitJointSetMax(cpConstraint *constraint, cpFloat max);
CP_EXPORT void cpShapeDestroy(cpShape *shape);
CP_EXPORT void cpShapeFree(cpShape *shape);
CP_EXPORT cpBB cpShapeCacheBB(cpShape *shape);
CP_EXPORT cpBB cpShapeUpdate(cpShape *shape, cpTransform transform);
CP_EXPORT cpFloat cpShapePointQuery(const cpShape *shape, cpVect p, cpPointQueryInfo *out);
CP_EXPORT cpBool cpShapeSegmentQuery(const cpShape *shape, cpVect a, cpVect b, cpFloat radius, cpSegmentQueryInfo *info);
CP_EXPORT cpContactPointSet cpShapesCollide(const cpShape *a, const cpShape *b);
CP_EXPORT cpSpace* cpShapeGetSpace(const cpShape *shape);
CP_EXPORT cpBody* cpShapeGetBody(const cpShape *shape);
CP_EXPORT void cpShapeSetBody(cpShape *shape, cpBody *body);
CP_EXPORT cpFloat cpShapeGetMass(cpShape *shape);
CP_EXPORT void cpShapeSetMass(cpShape *shape, cpFloat mass);
CP_EXPORT cpFloat cpShapeGetDensity(cpShape *shape);
CP_EXPORT void cpShapeSetDensity(cpShape *shape, cpFloat density);
CP_EXPORT cpFloat cpShapeGetMoment(cpShape *shape);
CP_EXPORT cpFloat cpShapeGetArea(cpShape *shape);
CP_EXPORT cpVect cpShapeGetCenterOfGravity(cpShape *shape);
CP_EXPORT cpBB cpShapeGetBB(const cpShape *shape);
CP_EXPORT cpBool cpShapeGetSensor(const cpShape *shape);
CP_EXPORT void cpShapeSetSensor(cpShape *shape, cpBool sensor);
CP_EXPORT cpFloat cpShapeGetElasticity(const cpShape *shape);
CP_EXPORT void cpShapeSetElasticity(cpShape *shape, cpFloat elasticity);
CP_EXPORT cpFloat cpShapeGetFriction(const cpShape *shape);
CP_EXPORT void cpShapeSetFriction(cpShape *shape, cpFloat friction);
CP_EXPORT cpVect cpShapeGetSurfaceVelocity(const cpShape *shape);
CP_EXPORT void cpShapeSetSurfaceVelocity(cpShape *shape, cpVect surfaceVelocity);
CP_EXPORT cpDataPointer cpShapeGetUserData(const cpShape *shape);
CP_EXPORT void cpShapeSetUserData(cpShape *shape, cpDataPointer userData);
CP_EXPORT cpCollisionType cpShapeGetCollisionType(const cpShape *shape);
CP_EXPORT void cpShapeSetCollisionType(cpShape *shape, cpCollisionType collisionType);
CP_EXPORT cpShapeFilter cpShapeGetFilter(const cpShape *shape);
CP_EXPORT void cpShapeSetFilter(cpShape *shape, cpShapeFilter filter);
CP_EXPORT cpCircleShape* cpCircleShapeAlloc(void);
CP_EXPORT cpCircleShape* cpCircleShapeInit(cpCircleShape *circle, cpBody *body, cpFloat radius, cpVect offset);
CP_EXPORT cpShape* cpCircleShapeNew(cpBody *body, cpFloat radius, cpVect offset);
CP_EXPORT cpVect cpCircleShapeGetOffset(const cpShape *shape);
CP_EXPORT cpFloat cpCircleShapeGetRadius(const cpShape *shape);
CP_EXPORT cpSegmentShape* cpSegmentShapeAlloc(void);
CP_EXPORT cpSegmentShape* cpSegmentShapeInit(cpSegmentShape *seg, cpBody *body, cpVect a, cpVect b, cpFloat radius);
CP_EXPORT cpShape* cpSegmentShapeNew(cpBody *body, cpVect a, cpVect b, cpFloat radius);
CP_EXPORT void cpSegmentShapeSetNeighbors(cpShape *shape, cpVect prev, cpVect next);
CP_EXPORT cpVect cpSegmentShapeGetA(const cpShape *shape);
CP_EXPORT cpVect cpSegmentShapeGetB(const cpShape *shape);
CP_EXPORT cpVect cpSegmentShapeGetNormal(const cpShape *shape);
CP_EXPORT cpFloat cpSegmentShapeGetRadius(const cpShape *shape);
CP_EXPORT cpBool cpConstraintIsSimpleMotor(const cpConstraint *constraint);
CP_EXPORT cpSimpleMotor* cpSimpleMotorAlloc(void);
CP_EXPORT cpSimpleMotor* cpSimpleMotorInit(cpSimpleMotor *joint, cpBody *a, cpBody *b, cpFloat rate);
CP_EXPORT cpConstraint* cpSimpleMotorNew(cpBody *a, cpBody *b, cpFloat rate);
CP_EXPORT cpFloat cpSimpleMotorGetRate(const cpConstraint *constraint);
CP_EXPORT void cpSimpleMotorSetRate(cpConstraint *constraint, cpFloat rate);
CP_EXPORT cpBool cpConstraintIsSlideJoint(const cpConstraint *constraint);
CP_EXPORT cpSlideJoint* cpSlideJointAlloc(void);
CP_EXPORT cpSlideJoint* cpSlideJointInit(cpSlideJoint *joint, cpBody *a, cpBody *b, cpVect anchorA, cpVect anchorB, cpFloat min, cpFloat max);
CP_EXPORT cpConstraint* cpSlideJointNew(cpBody *a, cpBody *b, cpVect anchorA, cpVect anchorB, cpFloat min, cpFloat max);
CP_EXPORT cpVect cpSlideJointGetAnchorA(const cpConstraint *constraint);
CP_EXPORT void cpSlideJointSetAnchorA(cpConstraint *constraint, cpVect anchorA);
CP_EXPORT cpVect cpSlideJointGetAnchorB(const cpConstraint *constraint);
CP_EXPORT void cpSlideJointSetAnchorB(cpConstraint *constraint, cpVect anchorB);
CP_EXPORT cpFloat cpSlideJointGetMin(const cpConstraint *constraint);
CP_EXPORT void cpSlideJointSetMin(cpConstraint *constraint, cpFloat min);
CP_EXPORT cpFloat cpSlideJointGetMax(const cpConstraint *constraint);
CP_EXPORT void cpSlideJointSetMax(cpConstraint *constraint, cpFloat max);
CP_EXPORT cpSpace* cpSpaceAlloc(void);
CP_EXPORT cpSpace* cpSpaceInit(cpSpace *space);
CP_EXPORT cpSpace* cpSpaceNew(void);
CP_EXPORT void cpSpaceDestroy(cpSpace *space);
CP_EXPORT void cpSpaceFree(cpSpace *space);
CP_EXPORT int cpSpaceGetIterations(const cpSpace *space);
CP_EXPORT void cpSpaceSetIterations(cpSpace *space, int iterations);
CP_EXPORT cpVect cpSpaceGetGravity(const cpSpace *space);
CP_EXPORT void cpSpaceSetGravity(cpSpace *space, cpVect gravity);
CP_EXPORT cpFloat cpSpaceGetDamping(const cpSpace *space);
CP_EXPORT void cpSpaceSetDamping(cpSpace *space, cpFloat damping);
CP_EXPORT cpFloat cpSpaceGetIdleSpeedThreshold(const cpSpace *space);
CP_EXPORT void cpSpaceSetIdleSpeedThreshold(cpSpace *space, cpFloat idleSpeedThreshold);
CP_EXPORT cpFloat cpSpaceGetSleepTimeThreshold(const cpSpace *space);
CP_EXPORT void cpSpaceSetSleepTimeThreshold(cpSpace *space, cpFloat sleepTimeThreshold);
CP_EXPORT cpFloat cpSpaceGetCollisionSlop(const cpSpace *space);
CP_EXPORT void cpSpaceSetCollisionSlop(cpSpace *space, cpFloat collisionSlop);
CP_EXPORT cpFloat cpSpaceGetCollisionBias(const cpSpace *space);
CP_EXPORT void cpSpaceSetCollisionBias(cpSpace *space, cpFloat collisionBias);
CP_EXPORT cpTimestamp cpSpaceGetCollisionPersistence(const cpSpace *space);
CP_EXPORT void cpSpaceSetCollisionPersistence(cpSpace *space, cpTimestamp collisionPersistence);
CP_EXPORT cpDataPointer cpSpaceGetUserData(const cpSpace *space);
CP_EXPORT void cpSpaceSetUserData(cpSpace *space, cpDataPointer userData);
CP_EXPORT cpBody* cpSpaceGetStaticBody(const cpSpace *space);
CP_EXPORT cpFloat cpSpaceGetCurrentTimeStep(const cpSpace *space);
CP_EXPORT cpBool cpSpaceIsLocked(cpSpace *space);
CP_EXPORT cpCollisionHandler *cpSpaceAddDefaultCollisionHandler(cpSpace *space);
CP_EXPORT cpCollisionHandler *cpSpaceAddCollisionHandler(cpSpace *space, cpCollisionType a, cpCollisionType b);
CP_EXPORT cpCollisionHandler *cpSpaceAddWildcardHandler(cpSpace *space, cpCollisionType type);
CP_EXPORT cpShape* cpSpaceAddShape(cpSpace *space, cpShape *shape);
CP_EXPORT cpBody* cpSpaceAddBody(cpSpace *space, cpBody *body);
CP_EXPORT cpConstraint* cpSpaceAddConstraint(cpSpace *space, cpConstraint *constraint);
CP_EXPORT void cpSpaceRemoveShape(cpSpace *space, cpShape *shape);
CP_EXPORT void cpSpaceRemoveBody(cpSpace *space, cpBody *body);
CP_EXPORT void cpSpaceRemoveConstraint(cpSpace *space, cpConstraint *constraint);
CP_EXPORT cpBool cpSpaceContainsShape(cpSpace *space, cpShape *shape);
CP_EXPORT cpBool cpSpaceContainsBody(cpSpace *space, cpBody *body);
CP_EXPORT cpBool cpSpaceContainsConstraint(cpSpace *space, cpConstraint *constraint);
CP_EXPORT cpBool cpSpaceAddPostStepCallback(cpSpace *space, cpPostStepFunc func, void *key, void *data);
CP_EXPORT void cpSpacePointQuery(cpSpace *space, cpVect point, cpFloat maxDistance, cpShapeFilter filter, cpSpacePointQueryFunc func, void *data);
CP_EXPORT cpShape *cpSpacePointQueryNearest(cpSpace *space, cpVect point, cpFloat maxDistance, cpShapeFilter filter, cpPointQueryInfo *out);
CP_EXPORT void cpSpaceSegmentQuery(cpSpace *space, cpVect start, cpVect end, cpFloat radius, cpShapeFilter filter, cpSpaceSegmentQueryFunc func, void *data);
CP_EXPORT cpShape *cpSpaceSegmentQueryFirst(cpSpace *space, cpVect start, cpVect end, cpFloat radius, cpShapeFilter filter, cpSegmentQueryInfo *out);
CP_EXPORT void cpSpaceBBQuery(cpSpace *space, cpBB bb, cpShapeFilter filter, cpSpaceBBQueryFunc func, void *data);
CP_EXPORT cpBool cpSpaceShapeQuery(cpSpace *space, cpShape *shape, cpSpaceShapeQueryFunc func, void *data);
CP_EXPORT void cpSpaceEachBody(cpSpace *space, cpSpaceBodyIteratorFunc func, void *data);
CP_EXPORT void cpSpaceEachShape(cpSpace *space, cpSpaceShapeIteratorFunc func, void *data);
CP_EXPORT void cpSpaceEachConstraint(cpSpace *space, cpSpaceConstraintIteratorFunc func, void *data);
CP_EXPORT void cpSpaceReindexStatic(cpSpace *space);
CP_EXPORT void cpSpaceReindexShape(cpSpace *space, cpShape *shape);
CP_EXPORT void cpSpaceReindexShapesForBody(cpSpace *space, cpBody *body);
CP_EXPORT void cpSpaceUseSpatialHash(cpSpace *space, cpFloat dim, int count);
CP_EXPORT void cpSpaceStep(cpSpace *space, cpFloat dt);
CP_EXPORT void cpSpaceDebugDraw(cpSpace *space, cpSpaceDebugDrawOptions *options);
CP_EXPORT cpSpaceHash* cpSpaceHashAlloc(void);
CP_EXPORT cpSpatialIndex* cpSpaceHashInit(cpSpaceHash *hash, cpFloat celldim, int numcells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);
CP_EXPORT cpSpatialIndex* cpSpaceHashNew(cpFloat celldim, int cells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);
CP_EXPORT void cpSpaceHashResize(cpSpaceHash *hash, cpFloat celldim, int numcells);
CP_EXPORT cpBBTree* cpBBTreeAlloc(void);
CP_EXPORT cpSpatialIndex* cpBBTreeInit(cpBBTree *tree, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);
CP_EXPORT cpSpatialIndex* cpBBTreeNew(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);
CP_EXPORT void cpBBTreeOptimize(cpSpatialIndex *index);
CP_EXPORT void cpBBTreeSetVelocityFunc(cpSpatialIndex *index, cpBBTreeVelocityFunc func);
CP_EXPORT cpSweep1D* cpSweep1DAlloc(void);
CP_EXPORT cpSpatialIndex* cpSweep1DInit(cpSweep1D *sweep, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);
CP_EXPORT cpSpatialIndex* cpSweep1DNew(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);
CP_EXPORT void cpSpatialIndexFree(cpSpatialIndex *index);
CP_EXPORT void cpSpatialIndexCollideStatic(cpSpatialIndex *dynamicIndex, cpSpatialIndex *staticIndex, cpSpatialIndexQueryFunc func, void *data);
